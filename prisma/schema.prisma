generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid())
  status    String
  username  String   @unique
  password  String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountActivation {
  id        String   @id @default(uuid())
  token     String   @db.Text
  createdAt DateTime @default(now())
}

model User {
  id                 String      @id @default(uuid())
  firstName          String
  lastName           String?
  phone              String?     @unique
  email              String?     @unique
  avatarUrl          String?     @db.Text
  jobTitle           String?     @db.Text
  department         String?     @db.Text
  organization       String?     @db.Text
  address            String?     @db.Text
  birthday           DateTime?
  sex                String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  account            Account?
  userOauth          UserOauth?
  projects           Project[]
  creatorLabels      Label[]     @relation("creator")
  updaterLabels      Label[]     @relation("updater")
  updaterProjects    Project[]   @relation("updater")
  creatorBoards      Board[]     @relation("creator")
  updaterBoards      Board[]     @relation("updater")
  creatorTasks       Task[]      @relation("creator")
  updaterTasks       Task[]      @relation("updater")
  tasks              Task[]
  creatorSubTasks    SubTask[]   @relation("creator")
  updaterSubTasks    SubTask[]   @relation("updater")
  comments           Comment[]
  creatorNotifies    Notify[]    @relation("creator")
  targetUserNotifies Notify[]    @relation("targetUser")
  authTokens         AuthToken[]
}

model UserOauth {
  id          String   @id @default(uuid())
  userId      String   @unique
  provider    String
  oauthId     String   @unique
  accessToken String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Project {
  id            String   @id @default(uuid())
  backgroundUrl String?  @db.Text
  name          String   @db.Text
  ownerId       String
  owner         User?    @relation(fields: [ownerId], references: [id])
  updatedBy     String
  updater       User?    @relation("updater", fields: [updatedBy], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  labels        Label[]
  isPublic      Boolean  @default(true)
  boards        Board[]
}

model Label {
  id        String   @id @default(uuid())
  projectId String
  name      String   @db.Text
  color     String?  @db.Text
  createdBy String?
  updatedBy String
  creator   User?    @relation("creator", fields: [createdBy], references: [id])
  updater   User?    @relation("updater", fields: [updatedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  isPublic  Boolean  @default(true)
}

model Board {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  name      String   @db.Text
  position  Int      @default(0)
  isPublic  Boolean  @default(true)
  createdBy String
  updatedBy String
  creator   User?    @relation("creator", fields: [createdBy], references: [id])
  updater   User?    @relation("updater", fields: [updatedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Task {
  id          String    @id @default(uuid())
  boardId     String
  name        String    @db.Text
  description String?   @db.Text
  timeStart   DateTime?
  timeEnd     DateTime?
  status      String?
  priority    String?
  attachments Json?
  isPublic    Boolean   @default(true)
  createdBy   String
  updatedBy   String
  creator     User?     @relation("creator", fields: [createdBy], references: [id])
  updater     User?     @relation("updater", fields: [updatedBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignees   User[]
  subtasks    SubTask[]
  comments    Comment[]
  board       Board     @relation(fields: [boardId], references: [id])
  notifies    Notify[]
}

model SubTask {
  id          String   @id @default(uuid())
  taskId      String
  description String?  @db.Text
  isCompleted Boolean  @default(false)
  isPublic    Boolean  @default(true)
  createdBy   String
  updatedBy   String
  creator     User?    @relation("creator", fields: [createdBy], references: [id])
  updater     User?    @relation("updater", fields: [updatedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  task        Task     @relation(fields: [taskId], references: [id])
}

model Comment {
  id          String   @id @default(uuid())
  taskId      String
  userId      String
  attachments Json
  messageType String?
  message     String?  @db.Text
  isEdited    Boolean?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  task        Task     @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Notify {
  id           String   @id @default(uuid())
  targetUserId String
  targetUser   User     @relation("targetUser", fields: [targetUserId], references: [id])
  isRead       Boolean
  taskId       String?
  task         Task?    @relation(fields: [taskId], references: [id])
  creatorId    String?
  creator      User?    @relation("creator", fields: [creatorId], references: [id])
  type         String
  createdAt    DateTime @default(now())
}

model AuthToken {
  userId       String
  user         User?     @relation(fields: [userId], references: [id])
  ip           String?
  userAgent    String?
  lastLogin    DateTime?
  refreshToken String
  deviceId     String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
